from flask import Flask, request, jsonify, Response
import subprocess
import os

app = Flask(__name__)

# Tradu√ß√µes espec√≠ficas para mensagens relacionadas a UPDATE no PostgreSQL
TRANSLATIONS = {
    "L016": "Use sempre uma cl√°usula WHERE ao fazer UPDATE ou DELETE para evitar altera√ß√µes em massa.",
    "L019": "Faltando um espa√ßo ap√≥s a v√≠rgula na cl√°usula SET.",
    "L040": "As colunas na cl√°usula SET n√£o est√£o corretamente separadas por v√≠rgulas.",
    "L042": "Faltando uma palavra-chave expl√≠cita como WHERE ou RETURNING ap√≥s o comando UPDATE.",
    "L044": "Evite usar tabelas sem alias em consultas complexas com UPDATE.",
    "L027": "Os operadores na cl√°usula SET devem ter um espa√ßo antes e depois (e.g., =).",
    "L032": "A ordem das colunas na cl√°usula SET n√£o segue o padr√£o definido.",
    "ambiguous.where_clause": "Cl√°usula WHERE ausente ou amb√≠gua. Certifique-se de filtrar os resultados corretamente ao usar UPDATE.",
    "ambiguous.column_count": "O comando UPDATE parece estar incompleto ou mal definido."
}

@app.route('/slack', methods=['POST'])
def handle_slack_event():
    data = request.form  # Slack envia os dados como 'form-urlencoded'
    query = data.get('text', '').strip()

    # Resposta inicial r√°pida para evitar timeout
    if not query:
        return Response("‚ö†Ô∏è Nenhuma query SQL encontrada! Por favor, envie uma query v√°lida.", status=200)

    # Salva a query em um arquivo tempor√°rio
    with open("temp.sql", "w") as f:
        f.write(query)

    try:
        # Executa o SQLFluff para validar a query
        result = subprocess.run(
            ["sqlfluff", "lint", "--dialect", "postgres", "temp.sql"],
            capture_output=True,
            text=True
        )

        # Processa a sa√≠da do SQLFluff
        lint_output = result.stdout.strip()
        if not lint_output:
            return jsonify({"text": "‚úÖ Nenhum problema encontrado na query! Tudo certo."})

        # Formata a sa√≠da do SQLFluff
        formatted_messages = []
        for line in lint_output.splitlines():
            if "L:" in line and "|" in line:
                # Extra√ß√£o da mensagem e c√≥digo
                parts = line.split("|")
                code = parts[-1].strip()
                message = TRANSLATIONS.get(code, parts[-1].strip())
                formatted_messages.append(f"‚Ä¢ {message}")

        # Resposta formatada para o Slack
        response_text = "‚ö†Ô∏è Problemas encontrados na query:\n```\n" + "\n".join(formatted_messages) + "\n```"
        return jsonify({"text": response_text})

    except Exception as e:
        # Captura e retorna erros inesperados
        return jsonify({"text": f"üö® Ocorreu um erro ao processar a query: {str(e)}"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
